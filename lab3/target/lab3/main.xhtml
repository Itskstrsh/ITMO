<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://java.sun.com/jsf/core">
<h:head>
    <title>Основная страница</title>


    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f8ff;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .card {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            width: 100%;
            text-align: center;
        }

        .form-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 10px;
        }

        .slider-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .button {
            padding: 8px 16px;
            font-size: 16px;
            background-color: #00509e;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
        }

        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .results-table th, .results-table td {
            padding: 8px;
            border: 1px solid #ccc;
            text-align: center;
        }

        .results-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .link {
            display: block;
            margin-top: 15px;
            color: #00509e;
            text-decoration: none;
            font-weight: bold;
        }

        .link:hover {
            text-decoration: underline;
        }

    </style>
    <script>
        let canvas, ctx;
        let R = 1;

        function initCanvas() {
            canvas = document.getElementById("areaCanvas");
            ctx = canvas.getContext("2d");
            drawArea(R);
        }

        let points = [];

        function drawArea(radius) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const scale = 100;

            ctx.fillStyle = "lightblue";

            ctx.fillRect(centerX - scale, centerY, scale, scale);

            ctx.beginPath();
            ctx.arc(centerX, centerY, scale / 2, Math.PI, 1.5 * Math.PI);
            ctx.lineTo(centerX, centerY);
            ctx.closePath();
            ctx.fill();

            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.lineTo(centerX + scale, centerY);
            ctx.lineTo(centerX, centerY + scale / 2);
            ctx.closePath();
            ctx.fill();

            ctx.strokeStyle = "black";
            ctx.beginPath();
            ctx.moveTo(0, centerY);
            ctx.lineTo(canvas.width, centerY);
            ctx.moveTo(centerX, 0);
            ctx.lineTo(centerX, canvas.height);
            ctx.stroke();

            ctx.fillStyle = "black";
            ctx.font = "12px Arial";
            ctx.fillText(radius.toFixed(2), centerX + scale, centerY);
            ctx.fillText((radius / 2).toFixed(2), centerX + scale / 2, centerY);
            ctx.fillText((-radius).toFixed(2), centerX - scale, centerY);
            ctx.fillText((-radius / 2).toFixed(2), centerX - scale / 2, centerY);
            ctx.fillText(radius.toFixed(2), centerX, centerY - scale);
            ctx.fillText((radius / 2).toFixed(2), centerX, centerY - scale / 2);
            ctx.fillText((-radius / 2).toFixed(2), centerX, centerY + scale / 2);
            ctx.fillText((-radius).toFixed(2), centerX, centerY + scale);

            points.forEach(point => {
                const relativeX = (point.absoluteX / R) * radius;
                const relativeY = (point.absoluteY / R) * radius;

                point.isInside = isPointInsideArea(relativeX, relativeY, radius);

                drawPoint(relativeX, relativeY, point.isInside);
            });
        }
        function isPointInsideArea(x, y, radius) {
            if (x >= -radius &amp;&amp; x &lt;= 0 &amp;&amp; y >= -radius &amp;&amp; y &lt;= 0) {
                return true;
            }
            if (x >= -radius / 2 &amp;&amp; x &lt;= 0 &amp;&amp; y >= 0 &amp;&amp; y &lt;= radius / 2) {
                if ((x * x + y * y) &lt;= (radius / 2) * (radius / 2)) {
                    return true;
                }
            }
            if (x >= 0 &amp;&amp; y &lt;= 0 &amp;&amp; y >= -0.5 * (radius - x)) {
                return true;
            }
            return false;
        }
        function drawPoint(x, y, isInside) {
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const pointX = centerX + (x / R) * 100;
            const pointY = centerY - (y / R) * 100;

            ctx.fillStyle = isInside ? "green" : "red";
            ctx.beginPath();
            ctx.arc(pointX, pointY, 4, 0, Math.PI * 2);
            ctx.fill();
        }

        function onCanvasClick(event) {
            const rect = canvas.getBoundingClientRect();
            const x = ((event.clientX - rect.left) - canvas.width / 2) / 100;
            const y = ((canvas.height / 2) - (event.clientY - rect.top)) / 100;

            const relativeX = x * R;
            const relativeY = y * R;

            sendCoordinatesToServer(relativeX, relativeY, R);
        }

        function sendCoordinatesToServer(x, y, r) {
            fetch('api/addResult', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ x: x.toFixed(2), y: y.toFixed(2), r: r })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        points.push({
                            absoluteX: x,
                            absoluteY: y,
                            isInside: result.isInside
                        });
                        drawArea(r);
                        updateResultsTable(x, y, r, result.isInside);
                    } else {
                        console.error('Failed to add result:', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        window.updateRadius = function(value) {
            const radiusValue = parseFloat(value);
            R = radiusValue;
            const rInput = document.getElementById("rInput");
            if (rInput) {
                rInput.value = radiusValue.toFixed(2);
            } else {
                console.error("Element 'rInput' not found.");
            }
            drawArea(R);
        };

        function updateResultsTable(x, y, r, isInside) {
            const resultsTable = document.querySelector("#results-table tbody");

            if (!resultsTable) {
                console.error("Table or tbody not found");
                return;
            }

            const newRow = document.createElement("tr");

            const xCell = document.createElement("td");
            xCell.textContent = x.toFixed(2);
            newRow.appendChild(xCell);

            const yCell = document.createElement("td");
            yCell.textContent = y.toFixed(2);
            newRow.appendChild(yCell);

            const rCell = document.createElement("td");
            rCell.textContent = r;
            newRow.appendChild(rCell);

            const resultCell = document.createElement("td");
            resultCell.textContent = isInside ? 'Попал' : 'Промах';
            newRow.appendChild(resultCell);

            resultsTable.appendChild(newRow);
        }

        function validateInputY(event, min, max) {
            const char = String.fromCharCode(event.which);
            const newValue = event.target.value + char;
            if (!/^-?\d*\.?\d*$/.test(newValue) || parseFloat(newValue) &lt; min || parseFloat(newValue) > max) {
                event.preventDefault();
                alert(`Пожалуйста, введите значение между -3 и 3`);
                event.target.value = "";
            }
        }

        window.onload = function() {
            initCanvas();
        };
    </script>
</h:head>

<h:body>
<div class="container">
    <div class="card">
        <h:form class="form-container">
            <canvas id="areaCanvas" width="300" height="300" onclick="onCanvasClick(event)" style="border: 1px solid #ccc;"></canvas>

            <div class="form-group">
                <h:outputLabel value="X:" for="xInput"/>
                <div class="slider-group">
                    <p:slider id="xSlider"
                              minValue="-4"
                              maxValue="4"
                              step="1"
                              for="xInput"
                              style="width: 100px;" />
                    <h:inputText id="xInput" value="#{x.x}" style="width: 50px; text-align: center;" disabled="false">
                    <f:validateDoubleRange minimum="-4" maximum="4"/>
                    </h:inputText>
                </div>
            </div>

            <div class="form-group">
                <h:outputLabel value="Y:(-3;3)" for="yInput" />
                <h:inputText id="yInput" value="#{y.y}" required="true" style="width: 50px; text-align: center;" onkeypress="validateInputY(event, -3, 3)" />
            </div>

            <div class="form-group">
                <h:outputLabel value="R:" />
                <div class="slider-group">
                    <p:slider id="rSlider"
                              minValue="1"
                              maxValue="4"
                              step="0.25"
                              for="rInput"
                              style="width: 100px;"
                              onSlideEnd="updateRadius(ui.value);"
                    />
                    <h:inputText id="rInput" value="#{r.r}" style="width: 50px; text-align: center;">
                    <f:validateDoubleRange minimum="1" maximum="4"/>
                    </h:inputText>
                </div>
            </div>

            <h:commandButton value="Проверить" styleClass="button">
                <f:ajax execute="@form"
                        listener="#{resultBean.addResultFromForm(x.x, y.y, r.r)}"
                        render="results-table"/>
            </h:commandButton>
            </h:form>

        <div class="section">
                <h:dataTable id="results-table" value="#{resultBean.results}" var="result" styleClass="results-table">
                    <h:column><f:facet name="header">X</f:facet><h:outputText value="#{result.x}" /></h:column>
                    <h:column><f:facet name="header">Y</f:facet><h:outputText value="#{result.y}" /></h:column>
                    <h:column><f:facet name="header">R</f:facet><h:outputText value="#{result.r}" /></h:column>
                    <h:column><f:facet name="header">Ответ</f:facet><h:outputText value="#{result.result ? 'Попал' : 'Промах'}" /></h:column>
                </h:dataTable>

                <h:form>
                    <h:commandLink value="Вернуться на стартовую страницу" action="goToHello" styleClass="link" />
                </h:form>
            </div>
        </div>
    </div>
</h:body>
</html>
