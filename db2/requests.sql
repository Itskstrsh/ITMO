--psql -h pg -d ucheb - подключение к БД
--1 запрос
--Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
--Таблицы: Н_ЛЮДИ, Н_СЕССИЯ.
--Вывести атрибуты: Н_ЛЮДИ.ОТЧЕСТВО, Н_СЕССИЯ.УЧГОД.
--Фильтры (AND):
--a) Н_ЛЮДИ.ФАМИЛИЯ = Соколов.
--b) Н_СЕССИЯ.УЧГОД > 2011/2012.
--Вид соединения: INNER JOIN.

SELECT
    Н_ЛЮДИ.ОТЧЕСТВО,
    Н_СЕССИЯ.УЧГОД
FROM
    Н_ЛЮДИ
    INNER JOIN Н_СЕССИЯ ON Н_ЛЮДИ.ИД = Н_СЕССИЯ.ИД
WHERE
    Н_ЛЮДИ.ОТЧЕСТВО = 'Соколов'
    AND Н_СЕССИЯ.УЧГОД > '2011/2012';

--2 запрос
--Сделать запрос для получения атрибутов из указанных таблиц, применив фильтры по указанным условиям:
--Таблицы: Н_ЛЮДИ, Н_ОБУЧЕНИЯ, Н_УЧЕНИКИ.
--Вывести атрибуты: Н_ЛЮДИ.ФАМИЛИЯ, Н_ОБУЧЕНИЯ.ЧЛВК_ИД, Н_УЧЕНИКИ.ГРУППА.
--Фильтры: (AND)
--a) Н_ЛЮДИ.ИД > 142095.
--b) Н_ОБУЧЕНИЯ.ЧЛВК_ИД > 163276.
--c) Н_УЧЕНИКИ.ГРУППА < 3100.
--Вид соединения: LEFT JOIN.
SELECT
    Н_ЛЮДИ.ФАМИЛИЯ,
    Н_ОБУЧЕНИЯ.ЧЛВК_ИД,
    Н_УЧЕНИКИ.ГРУППА
FROM
    Н_ЛЮДИ
    LEFT OUTER JOIN Н_ОБУЧЕНИЯ ON Н_ЛЮДИ.ИД = Н_ОБУЧЕНИЯ.ЧЛВК_ИД
    LEFT OUTER JOIN Н_УЧЕНИКИ ON Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
WHERE
    Н_ЛЮДИ.ИД > '142095'
    AND Н_ОБУЧЕНИЯ.ЧЛВК_ИД > '163276'
    AND Н_УЧЕНИКИ.ГРУППА < '3100';

--3 запрос
--Составить запрос, который ответит на вопрос, есть ли среди студентов ФКТИУ те, кто не имеет отчества
SELECT
    EXISTS (
        SELECT
            Н_ЛЮДИ.ИМЯ,
            Н_ЛЮДИ.ФАМИЛИЯ
        FROM
            Н_УЧЕНИКИ 
            INNER JOIN Н_ЛЮДИ ON Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
            INNER JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
            INNER JOIN Н_ОТДЕЛЫ ON Н_ПЛАНЫ.ОТД_ИД = Н_ОТДЕЛЫ.ИД
        WHERE
            Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ = 'КТиУ'
            AND Н_ЛЮДИ.ОТЧЕСТВО IS NULL
    );

--4 запрос
--Выдать различные фамилии студентов и число людей с каждой из этих фамилий, ограничив список фамилиями, встречающимися ровно 10 раз на ФКТИУ.
--Для реализации использовать соединение таблиц
SELECT
    Н_ЛЮДИ.ФАМИЛИЯ,
    COUNT(Н_ЛЮДИ.ФАМИЛИЯ)
FROM
    Н_УЧЕНИКИ
    INNER JOIN Н_ЛЮДИ ON Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
    INNER JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
    INNER JOIN Н_ОТДЕЛЫ ON Н_ПЛАНЫ.ОТД_ИД = Н_ОТДЕЛЫ.ИД
WHERE
    Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ = 'КТиУ'
GROUP BY
    Н_ЛЮДИ.ФАМИЛИЯ
HAVING
    COUNT(Н_ЛЮДИ.ФАМИЛИЯ) = 10;

--5 запрос
--Выведите таблицу со средними оценками студентов группы 4100 (Номер, ФИО, Ср_оценка), у которых средняя оценка не больше средней оценк(е|и) в группе 3100.
SELECT
    Н_УЧЕНИКИ.ЧЛВК_ИД,
    CONCAT (
        Н_ЛЮДИ.ФАМИЛИЯ,
        ' ',
        Н_ЛЮДИ.ИМЯ,
        ' ',
        Н_ЛЮДИ.ОТЧЕСТВО
    ) AS ФИО,
    AVG(
        CASE
            WHEN ОЦЕНКА = 'зачет' THEN NULL
            WHEN ОЦЕНКА = 'незач' THEN NULL
            WHEN ОЦЕНКА = 'осв' THEN NULL
            WHEN ОЦЕНКА = 'неявка' THEN NULL
            ELSE CAST(ОЦЕНКА AS INT)
        END
    ) AS Ср_оценка
FROM
    Н_УЧЕНИКИ
    JOIN Н_ЛЮДИ ON Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
    JOIN Н_ВЕДОМОСТИ ON Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ВЕДОМОСТИ.ЧЛВК_ИД
WHERE
    Н_УЧЕНИКИ.ГРУППА = '4100'
    AND CAST(
        CASE
            WHEN ОЦЕНКА = 'зачет' THEN NULL
            WHEN ОЦЕНКА = 'незач' THEN NULL
            WHEN ОЦЕНКА = 'осв' THEN NULL
            WHEN ОЦЕНКА = 'неявка' THEN NULL
            ELSE CAST(ОЦЕНКА AS INT)
        END AS INT
    ) <= (
        SELECT
            AVG(
                CASE
                    WHEN ОЦЕНКА = 'зачет' THEN NULL
                    WHEN ОЦЕНКА = 'незач' THEN NULL
                    WHEN ОЦЕНКА = 'осв' THEN NULL
                    WHEN ОЦЕНКА = 'неявка' THEN NULL
                    ELSE CAST(ОЦЕНКА AS INT)
                END
            )
        FROM
            Н_ВЕДОМОСТИ
        WHERE
            ЧЛВК_ИД IN (
                SELECT
                    ЧЛВК_ИД
                FROM
                    Н_УЧЕНИКИ
                WHERE
                    ГРУППА = '3100'
            )
    )
GROUP BY
    Н_УЧЕНИКИ.ЧЛВК_ИД,
    CONCAT (
        Н_ЛЮДИ.ФАМИЛИЯ,
        ' ',
        Н_ЛЮДИ.ИМЯ,
        ' ',
        Н_ЛЮДИ.ОТЧЕСТВО
    );

--6 запрос
--Получить список студентов, зачисленных ровно первого сентября 2012 года на первый курс очной формы обучения (специальность: Программная инженерия). В результат включить:
--номер группы;
--номер, фамилию, имя и отчество студента;
--номер и состояние пункта приказа;
--Для реализации использовать подзапрос с EXISTS.
SELECT
    Н_УЧЕНИКИ.ГРУППА,
    Н_ЛЮДИ.ИД,
    Н_ЛЮДИ.ФАМИЛИЯ,
    Н_ЛЮДИ.ИМЯ,
    Н_ЛЮДИ.ОТЧЕСТВО,
    Н_УЧЕНИКИ.ИД,
    Н_УЧЕНИКИ.СОСТОЯНИЕ
FROM
    Н_УЧЕНИКИ
    JOIN Н_ЛЮДИ ON Н_ЛЮДИ.ИД = Н_УЧЕНИКИ.ЧЛВК_ИД
    JOIN Н_ПЛАНЫ ON Н_ПЛАНЫ.ИД = Н_УЧЕНИКИ.ПЛАН_ИД
    JOIN Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ ON Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.ИД = Н_ПЛАНЫ.НАПС_ИД
    JOIN Н_НАПР_СПЕЦ ON Н_НАПР_СПЕЦ.ИД = Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.НАПС_ИД
WHERE
    EXISTS (
        SELECT
            Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.ИД
        FROM
            Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ
            JOIN Н_НАПР_СПЕЦ ON Н_НАПР_СПЕЦ.ИД = Н_НАПРАВЛЕНИЯ_СПЕЦИАЛ.НАПС_ИД
        WHERE
            Н_НАПР_СПЕЦ.НАИМЕНОВАНИЕ = 'Программная инженерия'
    )
    AND Н_УЧЕНИКИ.ПРИЗНАК = 'зачисл'
  --   диплом, повтор, академ, отчисл, продлен,обучен что писать в поле для значения зачислен, если в таблице есть только эти значения
    AND Н_УЧЕНИКИ.НАЧАЛО = '2012-09-01 00:00:00';

--7 запрос
--Сформировать запрос для получения числа на ФКТИУ троечников. 
SELECT
    COUNT(Н_ЛЮДИ.ИД)
FROM
    Н_ЛЮДИ
    JOIN Н_УЧЕНИКИ ON Н_УЧЕНИКИ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
    JOIN Н_ПЛАНЫ ON Н_УЧЕНИКИ.ПЛАН_ИД = Н_ПЛАНЫ.ИД
    JOIN Н_ОТДЕЛЫ ON Н_ПЛАНЫ.ОТД_ИД = Н_ОТДЕЛЫ.ИД
WHERE
    Н_ОТДЕЛЫ.КОРОТКОЕ_ИМЯ = 'КТиУ'
    AND Н_ЛЮДИ.ИД IN (
        SELECT
            Н_ЛЮДИ.ИД
        FROM
            Н_ЛЮДИ
            JOIN Н_ВЕДОМОСТИ ON Н_ВЕДОМОСТИ.ЧЛВК_ИД = Н_ЛЮДИ.ИД
            JOIN Н_ОЦЕНКИ ON Н_ВЕДОМОСТИ.ОЦЕНКА = Н_ОЦЕНКИ.КОД
        GROUP BY
            Н_ЛЮДИ.ИД,
            Н_ОЦЕНКИ.ПРИМЕЧАНИЕ
        HAVING
            Н_ОЦЕНКИ.ПРИМЕЧАНИЕ = 'удовлетворительно'
    );